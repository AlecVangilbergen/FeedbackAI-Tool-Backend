{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"api/","text":"API References add_template_solution ( template_content , db = Depends ( get_async_db )) async Add a new template solution to the database. Parameters: template_content ( CreateTemplate ) \u2013 The content of the template to be created. db ( AsyncSession , default: Depends ( get_async_db ) ) \u2013 The database session. Defaults to Depends(get_async_db). Returns: dict \u2013 A dictionary with a success message if the template is created successfully. Raises: HTTPException \u2013 If an error occurs during the template creation process. Source code in app/main.py 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 @app . post ( \"/template/add\" ) async def add_template_solution ( template_content : CreateTemplate , db : AsyncSession = Depends ( get_async_db )): \"\"\" Add a new template solution to the database. Args: template_content (CreateTemplate): The content of the template to be created. db (AsyncSession, optional): The database session. Defaults to Depends(get_async_db). Returns: dict: A dictionary with a success message if the template is created successfully. Raises: HTTPException: If an error occurs during the template creation process. \"\"\" try : repo = TemplateRepository ( session = db ) new_template = await repo . create_template ( template_content = template_content ) return { \"message\" : \"Template created successfully\" } except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e )) create_admin ( admin , db = Depends ( get_async_db )) async Create a new admin. Parameters: admin ( CreateAdmin ) \u2013 The admin data to be created. db ( AsyncSession , default: Depends ( get_async_db ) ) \u2013 The async database session. Defaults to Depends(get_async_db). Returns: dict \u2013 A dictionary containing a success message if the admin is created successfully. Raises: HTTPException \u2013 If there is an error creating the admin. Source code in app/main.py 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 @app . post ( \"/admin/add\" ) async def create_admin ( admin : CreateAdmin , db : AsyncSession = Depends ( get_async_db )): \"\"\" Create a new admin. Args: admin (CreateAdmin): The admin data to be created. db (AsyncSession, optional): The async database session. Defaults to Depends(get_async_db). Returns: dict: A dictionary containing a success message if the admin is created successfully. Raises: HTTPException: If there is an error creating the admin. \"\"\" try : repo = AdminRepository ( session = db ) new_admin = await repo . create_admin ( admin ) return { \"message\" : \"Admin created successfully\" } except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e )) create_organisation ( organisation , db = Depends ( get_async_db )) async Create a new organisation. Parameters: organisation ( CreateOrganisation ) \u2013 The details of the organisation to be created. db ( AsyncSession , default: Depends ( get_async_db ) ) \u2013 The database session. Defaults to Depends(get_async_db). Returns: dict \u2013 A dictionary containing a success message if the organisation is created successfully. Raises: HTTPException \u2013 If there is an error creating the organisation. Source code in app/main.py 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 @app . post ( \"/organisation/add\" ) async def create_organisation ( organisation : CreateOrganisation , db : AsyncSession = Depends ( get_async_db )): \"\"\" Create a new organisation. Args: organisation (CreateOrganisation): The details of the organisation to be created. db (AsyncSession, optional): The database session. Defaults to Depends(get_async_db). Returns: dict: A dictionary containing a success message if the organisation is created successfully. Raises: HTTPException: If there is an error creating the organisation. \"\"\" try : repo = OrganisationRepository ( session = db ) # Pass the session directly to the OrganisationRepository new_organisation = await repo . create_organisation ( organisation ) # Create the new organisation return { \"message\" : \"Organisation created successfully\" } except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e )) delete_admin ( id , db = Depends ( get_async_db )) async Delete an admin by their ID. Parameters: id ( int ) \u2013 The ID of the admin to be deleted. db ( AsyncSession , default: Depends ( get_async_db ) ) \u2013 The async database session. Defaults to Depends(get_async_db). Returns: dict \u2013 A dictionary containing a success message if the admin is deleted successfully. Raises: HTTPException \u2013 If an error occurs during the deletion process. Source code in app/main.py 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 @app . delete ( \"/admin/delete/ {id} \" ) async def delete_admin ( id : int , db : AsyncSession = Depends ( get_async_db )): \"\"\" Delete an admin by their ID. Args: id (int): The ID of the admin to be deleted. db (AsyncSession, optional): The async database session. Defaults to Depends(get_async_db). Returns: dict: A dictionary containing a success message if the admin is deleted successfully. Raises: HTTPException: If an error occurs during the deletion process. \"\"\" try : repo = AdminRepository ( session = db ) admin = await repo . delete_admin_by_id ( id ) return { \"message\" : \"Admin deleted successfully\" } except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e )) delete_organisation ( id , db = Depends ( get_async_db )) async Delete an organisation by its ID. Parameters: - id (int): The ID of the organisation to be deleted. - db (AsyncSession): The asynchronous database session. Returns: - dict: A dictionary with a success message if the organisation is deleted successfully. Raises: - HTTPException: If an error occurs during the deletion process. Source code in app/main.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 @app . delete ( \"/organisation/delete/ {id} \" ) async def delete_organisation ( id : int , db : AsyncSession = Depends ( get_async_db )): \"\"\" Delete an organisation by its ID. Parameters: - id (int): The ID of the organisation to be deleted. - db (AsyncSession): The asynchronous database session. Returns: - dict: A dictionary with a success message if the organisation is deleted successfully. Raises: - HTTPException: If an error occurs during the deletion process. \"\"\" try : repo = OrganisationRepository ( session = db ) organisation = await repo . delete_organisation ( id ) return { \"message\" : \"Organisation deleted successfully\" } except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e )) generate_template_solution ( assignment_id , db = Depends ( get_async_db )) async Generate a template solution for a given assignment ID. Parameters: - assignment_id (int): The ID of the assignment for which to generate the template solution. - db (AsyncSession): The asynchronous database session. Returns: - template (str): The generated template solution. Raises: - HTTPException: If an error occurs during the generation of the template solution. Source code in app/main.py 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 @app . get ( \"/template/generate/ {assignment_id} \" ) async def generate_template_solution ( assignment_id : int , db : AsyncSession = Depends ( get_async_db )): \"\"\" Generate a template solution for a given assignment ID. Parameters: - assignment_id (int): The ID of the assignment for which to generate the template solution. - db (AsyncSession): The asynchronous database session. Returns: - template (str): The generated template solution. Raises: - HTTPException: If an error occurs during the generation of the template solution. \"\"\" try : template_service = TemplateService ( session = db ) template = await template_service . generate_template_solution ( assignment_id = assignment_id ) return template except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e )) get_admin_by_id ( id , db = Depends ( get_async_db )) async Retrieve an admin by their ID. Parameters: id ( int ) \u2013 The ID of the admin to retrieve. db ( AsyncSession , default: Depends ( get_async_db ) ) \u2013 The database session. Defaults to Depends(get_async_db). Returns: Admin \u2013 The admin object if found. Raises: HTTPException \u2013 If the admin is not found or an error occurs. Source code in app/main.py 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 @app . get ( \"/admin/id/ {id} \" ) async def get_admin_by_id ( id : int , db : AsyncSession = Depends ( get_async_db )): \"\"\" Retrieve an admin by their ID. Args: id (int): The ID of the admin to retrieve. db (AsyncSession, optional): The database session. Defaults to Depends(get_async_db). Returns: Admin: The admin object if found. Raises: HTTPException: If the admin is not found or an error occurs. \"\"\" try : repo = AdminRepository ( session = db ) admin = await repo . get_admin_by_id ( id ) if admin : return admin else : raise HTTPException ( status_code = 404 , detail = \"Admin not found\" ) except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e )) get_admin_by_name ( username , db = Depends ( get_async_db )) async Retrieve an admin by their username. Parameters: username ( str ) \u2013 The username of the admin to retrieve. db ( AsyncSession , default: Depends ( get_async_db ) ) \u2013 The database session. Defaults to Depends(get_async_db). Returns: Admin \u2013 The admin object if found. Raises: HTTPException \u2013 If the admin is not found or an error occurs. Source code in app/main.py 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 @app . get ( \"/admin/ {username} \" ) async def get_admin_by_name ( username : str , db : AsyncSession = Depends ( get_async_db )): \"\"\" Retrieve an admin by their username. Args: username (str): The username of the admin to retrieve. db (AsyncSession, optional): The database session. Defaults to Depends(get_async_db). Returns: Admin: The admin object if found. Raises: HTTPException: If the admin is not found or an error occurs. \"\"\" try : repo = AdminRepository ( session = db ) admin = await repo . get_admin_by_name ( username ) if admin : return admin else : raise HTTPException ( status_code = 404 , detail = \"Admin not found\" ) except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e )) get_admins ( db = Depends ( get_async_db )) async Retrieve all admins from the database. Parameters: - db: AsyncSession - The async database session. Returns: - List[Admin] - A list of admin objects retrieved from the database. Raises: - HTTPException: If there is an error retrieving the admins from the database. Source code in app/main.py 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 @app . get ( \"/admins\" ) async def get_admins ( db : AsyncSession = Depends ( get_async_db )): \"\"\" Retrieve all admins from the database. Parameters: - db: AsyncSession - The async database session. Returns: - List[Admin] - A list of admin objects retrieved from the database. Raises: - HTTPException: If there is an error retrieving the admins from the database. \"\"\" try : repo = AdminRepository ( session = db ) admins = await repo . get_admins () return admins except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e )) get_all_templates ( db = Depends ( get_async_db )) async Retrieve all templates from the database. Parameters: - db: AsyncSession - The async database session. Returns: - List[Template] - A list of templates retrieved from the database. Raises: - HTTPException: If there is an error retrieving the templates. Source code in app/main.py 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 @app . get ( \"/templates\" ) async def get_all_templates ( db : AsyncSession = Depends ( get_async_db )): \"\"\" Retrieve all templates from the database. Parameters: - db: AsyncSession - The async database session. Returns: - List[Template] - A list of templates retrieved from the database. Raises: - HTTPException: If there is an error retrieving the templates. \"\"\" try : repo = TemplateRepository ( session = db ) templates = await repo . get_all_templates () return templates except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e )) get_assignment_by_id ( assignment_id , db = Depends ( get_async_db )) async Retrieve an assignment by its ID. Parameters: assignment_id ( int ) \u2013 The ID of the assignment to retrieve. db ( AsyncSession , default: Depends ( get_async_db ) ) \u2013 The database session. Defaults to Depends(get_async_db). Returns: Assignment \u2013 The retrieved assignment. Raises: HTTPException \u2013 If the assignment is not found or an error occurs during retrieval. Source code in app/main.py 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 @app . get ( \"/assignment/ {assignment_id} \" ) async def get_assignment_by_id ( assignment_id : int , db : AsyncSession = Depends ( get_async_db )): \"\"\" Retrieve an assignment by its ID. Args: assignment_id (int): The ID of the assignment to retrieve. db (AsyncSession, optional): The database session. Defaults to Depends(get_async_db). Returns: Assignment: The retrieved assignment. Raises: HTTPException: If the assignment is not found or an error occurs during retrieval. \"\"\" try : repo = AssignmentRepository ( session = db ) assignment = await repo . get_assignment_by_id ( assignment_id ) if assignment : return assignment else : raise HTTPException ( status_code = 404 , detail = \"Assignment not found\" ) except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e )) get_assignments ( db = Depends ( get_async_db )) async Retrieve all assignments from the database. Parameters: - db: AsyncSession - The async database session. Returns: - List[Assignment]: A list of assignments retrieved from the database. Raises: - HTTPException: If there is an error retrieving the assignments from the database. Source code in app/main.py 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 @app . get ( \"/assignments\" ) async def get_assignments ( db : AsyncSession = Depends ( get_async_db )): \"\"\" Retrieve all assignments from the database. Parameters: - db: AsyncSession - The async database session. Returns: - List[Assignment]: A list of assignments retrieved from the database. Raises: - HTTPException: If there is an error retrieving the assignments from the database. \"\"\" try : repo = AssignmentRepository ( session = db ) assignments = await repo . get_assignments () return assignments except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e )) get_assignments_by_course_id ( course_id , db = Depends ( get_async_db )) async Retrieve assignments by course ID. Parameters: course_id ( int ) \u2013 The ID of the course. Returns: \u2013 List[Assignment]: A list of assignments associated with the given course ID. Raises: HTTPException \u2013 If there is an error retrieving the assignments. Source code in app/main.py 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 @app . get ( \"/assignment/course/ {course_id} \" ) async def get_assignments_by_course_id ( course_id : int , db : AsyncSession = Depends ( get_async_db )): \"\"\" Retrieve assignments by course ID. Args: course_id (int): The ID of the course. Returns: List[Assignment]: A list of assignments associated with the given course ID. Raises: HTTPException: If there is an error retrieving the assignments. \"\"\" try : repo = AssignmentRepository ( session = db ) assignments = await repo . get_assignments_by_course_id ( course_id ) return assignments except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e )) get_feedback_by_submission_id ( submission_id , db = Depends ( get_async_db )) async Retrieve feedback by submission ID. Parameters: submission_id ( int ) \u2013 The ID of the submission. db ( AsyncSession , default: Depends ( get_async_db ) ) \u2013 The async database session. Defaults to Depends(get_async_db). Returns: feedback \u2013 The feedback associated with the submission ID. Raises: HTTPException \u2013 If an error occurs while retrieving the feedback. Source code in app/main.py 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 @app . get ( \"/submission/feedback/ {submission_id} \" ) async def get_feedback_by_submission_id ( submission_id : int , db : AsyncSession = Depends ( get_async_db )): \"\"\" Retrieve feedback by submission ID. Args: submission_id (int): The ID of the submission. db (AsyncSession, optional): The async database session. Defaults to Depends(get_async_db). Returns: feedback: The feedback associated with the submission ID. Raises: HTTPException: If an error occurs while retrieving the feedback. \"\"\" try : repo = FeedbackRepository ( session = db ) feedback = await repo . get_feedback_by_submission_id ( submission_id ) return feedback except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e )) get_organisation_by_id ( id , db = Depends ( get_async_db )) async Retrieve an organisation by its ID. Parameters: - id (int): The ID of the organisation to retrieve. - db (AsyncSession): The asynchronous database session. Returns: - dict: The organisation information if found. Raises: - HTTPException: If the organisation is not found (status_code=404) or if there is a server error (status_code=500). Source code in app/main.py 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 @app . get ( \"/organisation/id/ {id} \" ) async def get_organisation_by_id ( id : int , db : AsyncSession = Depends ( get_async_db )): \"\"\" Retrieve an organisation by its ID. Parameters: - id (int): The ID of the organisation to retrieve. - db (AsyncSession): The asynchronous database session. Returns: - dict: The organisation information if found. Raises: - HTTPException: If the organisation is not found (status_code=404) or if there is a server error (status_code=500). \"\"\" try : repo = OrganisationRepository ( session = db ) organisation = await repo . get_organisation_by_id ( id ) if organisation : return organisation else : raise HTTPException ( status_code = 404 , detail = \"Organisation not found\" ) except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e )) get_organisation_by_name ( name , db = Depends ( get_async_db )) async Retrieve an organisation by its name. Parameters: name ( str ) \u2013 The name of the organisation. db ( AsyncSession , default: Depends ( get_async_db ) ) \u2013 The database session. Defaults to Depends(get_async_db). Returns: dict \u2013 The organisation details if found. Raises: HTTPException \u2013 If the organisation is not found or an error occurs. Source code in app/main.py 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 @app . get ( \"/organisation/ {name} \" ) async def get_organisation_by_name ( name : str , db : AsyncSession = Depends ( get_async_db )): \"\"\" Retrieve an organisation by its name. Args: name (str): The name of the organisation. db (AsyncSession, optional): The database session. Defaults to Depends(get_async_db). Returns: dict: The organisation details if found. Raises: HTTPException: If the organisation is not found or an error occurs. \"\"\" try : repo = OrganisationRepository ( session = db ) organisation = await repo . get_organisation_by_name ( name ) if organisation : return organisation else : raise HTTPException ( status_code = 404 , detail = \"Organisation not found\" ) except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e )) get_organisations ( db = Depends ( get_async_db )) async Retrieve a list of organisations from the database. Parameters: - db: AsyncSession - The async database session. Returns: - List[Organisation] - A list of organisations retrieved from the database. Raises: - HTTPException: If there is an error retrieving the organisations from the database. Source code in app/main.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 @app . get ( \"/organisations\" ) async def get_organisations ( db : AsyncSession = Depends ( get_async_db )): \"\"\" Retrieve a list of organisations from the database. Parameters: - db: AsyncSession - The async database session. Returns: - List[Organisation] - A list of organisations retrieved from the database. Raises: - HTTPException: If there is an error retrieving the organisations from the database. \"\"\" try : repo = OrganisationRepository ( session = db ) organisations = await repo . get_organisations () return organisations except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e )) get_templates_for_assignment ( assignment_id , db = Depends ( get_async_db )) async Retrieve templates for a specific assignment. Parameters: assignment_id ( int ) \u2013 The ID of the assignment. db ( AsyncSession , default: Depends ( get_async_db ) ) \u2013 The async database session. Defaults to Depends(get_async_db). Returns: \u2013 List[Template]: A list of templates for the assignment. Raises: HTTPException \u2013 If there is an error retrieving the templates. Source code in app/main.py 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 @app . get ( \"/assignment/ {assignment_id} /get_templates\" ) async def get_templates_for_assignment ( assignment_id : int , db : AsyncSession = Depends ( get_async_db )): \"\"\" Retrieve templates for a specific assignment. Args: assignment_id (int): The ID of the assignment. db (AsyncSession, optional): The async database session. Defaults to Depends(get_async_db). Returns: List[Template]: A list of templates for the assignment. Raises: HTTPException: If there is an error retrieving the templates. \"\"\" try : repo = TemplateRepository ( session = db ) temples_for_assignment = await repo . get_templates_for_assignment ( assignment_id ) return temples_for_assignment except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e )) student_submit_assignment ( submission , db = Depends ( get_async_db )) async Submits a student assignment and returns the feedback. Parameters: submission ( CreateSubmission ) \u2013 The submission object containing the assignment details and the content of the submission. db ( AsyncSession , default: Depends ( get_async_db ) ) \u2013 The async database session. Defaults to Depends(get_async_db). Returns: Feedback \u2013 The feedback object generated for the submission by OpenAI's API. Raises: HTTPException \u2013 If an error occurs during the submission process. Source code in app/main.py 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 @app . post ( \"/student/assignment/submit\" ) async def student_submit_assignment ( submission : CreateSubmission , db : AsyncSession = Depends ( get_async_db )): \"\"\" Submits a student assignment and returns the feedback. Args: submission (CreateSubmission): The submission object containing the assignment details and the content of the submission. db (AsyncSession, optional): The async database session. Defaults to Depends(get_async_db). Returns: Feedback: The feedback object generated for the submission by OpenAI's API. Raises: HTTPException: If an error occurs during the submission process. \"\"\" try : submission_service = SubmissionService ( session = db ) feedback = await submission_service . student_submit_assignment ( submission ) return feedback except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e ))","title":"FastAPI"},{"location":"api/#api-references","text":"","title":"API References"},{"location":"api/#app.main.add_template_solution","text":"Add a new template solution to the database. Parameters: template_content ( CreateTemplate ) \u2013 The content of the template to be created. db ( AsyncSession , default: Depends ( get_async_db ) ) \u2013 The database session. Defaults to Depends(get_async_db). Returns: dict \u2013 A dictionary with a success message if the template is created successfully. Raises: HTTPException \u2013 If an error occurs during the template creation process. Source code in app/main.py 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 @app . post ( \"/template/add\" ) async def add_template_solution ( template_content : CreateTemplate , db : AsyncSession = Depends ( get_async_db )): \"\"\" Add a new template solution to the database. Args: template_content (CreateTemplate): The content of the template to be created. db (AsyncSession, optional): The database session. Defaults to Depends(get_async_db). Returns: dict: A dictionary with a success message if the template is created successfully. Raises: HTTPException: If an error occurs during the template creation process. \"\"\" try : repo = TemplateRepository ( session = db ) new_template = await repo . create_template ( template_content = template_content ) return { \"message\" : \"Template created successfully\" } except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e ))","title":"add_template_solution"},{"location":"api/#app.main.create_admin","text":"Create a new admin. Parameters: admin ( CreateAdmin ) \u2013 The admin data to be created. db ( AsyncSession , default: Depends ( get_async_db ) ) \u2013 The async database session. Defaults to Depends(get_async_db). Returns: dict \u2013 A dictionary containing a success message if the admin is created successfully. Raises: HTTPException \u2013 If there is an error creating the admin. Source code in app/main.py 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 @app . post ( \"/admin/add\" ) async def create_admin ( admin : CreateAdmin , db : AsyncSession = Depends ( get_async_db )): \"\"\" Create a new admin. Args: admin (CreateAdmin): The admin data to be created. db (AsyncSession, optional): The async database session. Defaults to Depends(get_async_db). Returns: dict: A dictionary containing a success message if the admin is created successfully. Raises: HTTPException: If there is an error creating the admin. \"\"\" try : repo = AdminRepository ( session = db ) new_admin = await repo . create_admin ( admin ) return { \"message\" : \"Admin created successfully\" } except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e ))","title":"create_admin"},{"location":"api/#app.main.create_organisation","text":"Create a new organisation. Parameters: organisation ( CreateOrganisation ) \u2013 The details of the organisation to be created. db ( AsyncSession , default: Depends ( get_async_db ) ) \u2013 The database session. Defaults to Depends(get_async_db). Returns: dict \u2013 A dictionary containing a success message if the organisation is created successfully. Raises: HTTPException \u2013 If there is an error creating the organisation. Source code in app/main.py 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 @app . post ( \"/organisation/add\" ) async def create_organisation ( organisation : CreateOrganisation , db : AsyncSession = Depends ( get_async_db )): \"\"\" Create a new organisation. Args: organisation (CreateOrganisation): The details of the organisation to be created. db (AsyncSession, optional): The database session. Defaults to Depends(get_async_db). Returns: dict: A dictionary containing a success message if the organisation is created successfully. Raises: HTTPException: If there is an error creating the organisation. \"\"\" try : repo = OrganisationRepository ( session = db ) # Pass the session directly to the OrganisationRepository new_organisation = await repo . create_organisation ( organisation ) # Create the new organisation return { \"message\" : \"Organisation created successfully\" } except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e ))","title":"create_organisation"},{"location":"api/#app.main.delete_admin","text":"Delete an admin by their ID. Parameters: id ( int ) \u2013 The ID of the admin to be deleted. db ( AsyncSession , default: Depends ( get_async_db ) ) \u2013 The async database session. Defaults to Depends(get_async_db). Returns: dict \u2013 A dictionary containing a success message if the admin is deleted successfully. Raises: HTTPException \u2013 If an error occurs during the deletion process. Source code in app/main.py 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 @app . delete ( \"/admin/delete/ {id} \" ) async def delete_admin ( id : int , db : AsyncSession = Depends ( get_async_db )): \"\"\" Delete an admin by their ID. Args: id (int): The ID of the admin to be deleted. db (AsyncSession, optional): The async database session. Defaults to Depends(get_async_db). Returns: dict: A dictionary containing a success message if the admin is deleted successfully. Raises: HTTPException: If an error occurs during the deletion process. \"\"\" try : repo = AdminRepository ( session = db ) admin = await repo . delete_admin_by_id ( id ) return { \"message\" : \"Admin deleted successfully\" } except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e ))","title":"delete_admin"},{"location":"api/#app.main.delete_organisation","text":"Delete an organisation by its ID. Parameters: - id (int): The ID of the organisation to be deleted. - db (AsyncSession): The asynchronous database session. Returns: - dict: A dictionary with a success message if the organisation is deleted successfully. Raises: - HTTPException: If an error occurs during the deletion process. Source code in app/main.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 @app . delete ( \"/organisation/delete/ {id} \" ) async def delete_organisation ( id : int , db : AsyncSession = Depends ( get_async_db )): \"\"\" Delete an organisation by its ID. Parameters: - id (int): The ID of the organisation to be deleted. - db (AsyncSession): The asynchronous database session. Returns: - dict: A dictionary with a success message if the organisation is deleted successfully. Raises: - HTTPException: If an error occurs during the deletion process. \"\"\" try : repo = OrganisationRepository ( session = db ) organisation = await repo . delete_organisation ( id ) return { \"message\" : \"Organisation deleted successfully\" } except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e ))","title":"delete_organisation"},{"location":"api/#app.main.generate_template_solution","text":"Generate a template solution for a given assignment ID. Parameters: - assignment_id (int): The ID of the assignment for which to generate the template solution. - db (AsyncSession): The asynchronous database session. Returns: - template (str): The generated template solution. Raises: - HTTPException: If an error occurs during the generation of the template solution. Source code in app/main.py 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 @app . get ( \"/template/generate/ {assignment_id} \" ) async def generate_template_solution ( assignment_id : int , db : AsyncSession = Depends ( get_async_db )): \"\"\" Generate a template solution for a given assignment ID. Parameters: - assignment_id (int): The ID of the assignment for which to generate the template solution. - db (AsyncSession): The asynchronous database session. Returns: - template (str): The generated template solution. Raises: - HTTPException: If an error occurs during the generation of the template solution. \"\"\" try : template_service = TemplateService ( session = db ) template = await template_service . generate_template_solution ( assignment_id = assignment_id ) return template except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e ))","title":"generate_template_solution"},{"location":"api/#app.main.get_admin_by_id","text":"Retrieve an admin by their ID. Parameters: id ( int ) \u2013 The ID of the admin to retrieve. db ( AsyncSession , default: Depends ( get_async_db ) ) \u2013 The database session. Defaults to Depends(get_async_db). Returns: Admin \u2013 The admin object if found. Raises: HTTPException \u2013 If the admin is not found or an error occurs. Source code in app/main.py 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 @app . get ( \"/admin/id/ {id} \" ) async def get_admin_by_id ( id : int , db : AsyncSession = Depends ( get_async_db )): \"\"\" Retrieve an admin by their ID. Args: id (int): The ID of the admin to retrieve. db (AsyncSession, optional): The database session. Defaults to Depends(get_async_db). Returns: Admin: The admin object if found. Raises: HTTPException: If the admin is not found or an error occurs. \"\"\" try : repo = AdminRepository ( session = db ) admin = await repo . get_admin_by_id ( id ) if admin : return admin else : raise HTTPException ( status_code = 404 , detail = \"Admin not found\" ) except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e ))","title":"get_admin_by_id"},{"location":"api/#app.main.get_admin_by_name","text":"Retrieve an admin by their username. Parameters: username ( str ) \u2013 The username of the admin to retrieve. db ( AsyncSession , default: Depends ( get_async_db ) ) \u2013 The database session. Defaults to Depends(get_async_db). Returns: Admin \u2013 The admin object if found. Raises: HTTPException \u2013 If the admin is not found or an error occurs. Source code in app/main.py 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 @app . get ( \"/admin/ {username} \" ) async def get_admin_by_name ( username : str , db : AsyncSession = Depends ( get_async_db )): \"\"\" Retrieve an admin by their username. Args: username (str): The username of the admin to retrieve. db (AsyncSession, optional): The database session. Defaults to Depends(get_async_db). Returns: Admin: The admin object if found. Raises: HTTPException: If the admin is not found or an error occurs. \"\"\" try : repo = AdminRepository ( session = db ) admin = await repo . get_admin_by_name ( username ) if admin : return admin else : raise HTTPException ( status_code = 404 , detail = \"Admin not found\" ) except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e ))","title":"get_admin_by_name"},{"location":"api/#app.main.get_admins","text":"Retrieve all admins from the database. Parameters: - db: AsyncSession - The async database session. Returns: - List[Admin] - A list of admin objects retrieved from the database. Raises: - HTTPException: If there is an error retrieving the admins from the database. Source code in app/main.py 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 @app . get ( \"/admins\" ) async def get_admins ( db : AsyncSession = Depends ( get_async_db )): \"\"\" Retrieve all admins from the database. Parameters: - db: AsyncSession - The async database session. Returns: - List[Admin] - A list of admin objects retrieved from the database. Raises: - HTTPException: If there is an error retrieving the admins from the database. \"\"\" try : repo = AdminRepository ( session = db ) admins = await repo . get_admins () return admins except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e ))","title":"get_admins"},{"location":"api/#app.main.get_all_templates","text":"Retrieve all templates from the database. Parameters: - db: AsyncSession - The async database session. Returns: - List[Template] - A list of templates retrieved from the database. Raises: - HTTPException: If there is an error retrieving the templates. Source code in app/main.py 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 @app . get ( \"/templates\" ) async def get_all_templates ( db : AsyncSession = Depends ( get_async_db )): \"\"\" Retrieve all templates from the database. Parameters: - db: AsyncSession - The async database session. Returns: - List[Template] - A list of templates retrieved from the database. Raises: - HTTPException: If there is an error retrieving the templates. \"\"\" try : repo = TemplateRepository ( session = db ) templates = await repo . get_all_templates () return templates except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e ))","title":"get_all_templates"},{"location":"api/#app.main.get_assignment_by_id","text":"Retrieve an assignment by its ID. Parameters: assignment_id ( int ) \u2013 The ID of the assignment to retrieve. db ( AsyncSession , default: Depends ( get_async_db ) ) \u2013 The database session. Defaults to Depends(get_async_db). Returns: Assignment \u2013 The retrieved assignment. Raises: HTTPException \u2013 If the assignment is not found or an error occurs during retrieval. Source code in app/main.py 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 @app . get ( \"/assignment/ {assignment_id} \" ) async def get_assignment_by_id ( assignment_id : int , db : AsyncSession = Depends ( get_async_db )): \"\"\" Retrieve an assignment by its ID. Args: assignment_id (int): The ID of the assignment to retrieve. db (AsyncSession, optional): The database session. Defaults to Depends(get_async_db). Returns: Assignment: The retrieved assignment. Raises: HTTPException: If the assignment is not found or an error occurs during retrieval. \"\"\" try : repo = AssignmentRepository ( session = db ) assignment = await repo . get_assignment_by_id ( assignment_id ) if assignment : return assignment else : raise HTTPException ( status_code = 404 , detail = \"Assignment not found\" ) except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e ))","title":"get_assignment_by_id"},{"location":"api/#app.main.get_assignments","text":"Retrieve all assignments from the database. Parameters: - db: AsyncSession - The async database session. Returns: - List[Assignment]: A list of assignments retrieved from the database. Raises: - HTTPException: If there is an error retrieving the assignments from the database. Source code in app/main.py 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 @app . get ( \"/assignments\" ) async def get_assignments ( db : AsyncSession = Depends ( get_async_db )): \"\"\" Retrieve all assignments from the database. Parameters: - db: AsyncSession - The async database session. Returns: - List[Assignment]: A list of assignments retrieved from the database. Raises: - HTTPException: If there is an error retrieving the assignments from the database. \"\"\" try : repo = AssignmentRepository ( session = db ) assignments = await repo . get_assignments () return assignments except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e ))","title":"get_assignments"},{"location":"api/#app.main.get_assignments_by_course_id","text":"Retrieve assignments by course ID. Parameters: course_id ( int ) \u2013 The ID of the course. Returns: \u2013 List[Assignment]: A list of assignments associated with the given course ID. Raises: HTTPException \u2013 If there is an error retrieving the assignments. Source code in app/main.py 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 @app . get ( \"/assignment/course/ {course_id} \" ) async def get_assignments_by_course_id ( course_id : int , db : AsyncSession = Depends ( get_async_db )): \"\"\" Retrieve assignments by course ID. Args: course_id (int): The ID of the course. Returns: List[Assignment]: A list of assignments associated with the given course ID. Raises: HTTPException: If there is an error retrieving the assignments. \"\"\" try : repo = AssignmentRepository ( session = db ) assignments = await repo . get_assignments_by_course_id ( course_id ) return assignments except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e ))","title":"get_assignments_by_course_id"},{"location":"api/#app.main.get_feedback_by_submission_id","text":"Retrieve feedback by submission ID. Parameters: submission_id ( int ) \u2013 The ID of the submission. db ( AsyncSession , default: Depends ( get_async_db ) ) \u2013 The async database session. Defaults to Depends(get_async_db). Returns: feedback \u2013 The feedback associated with the submission ID. Raises: HTTPException \u2013 If an error occurs while retrieving the feedback. Source code in app/main.py 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 @app . get ( \"/submission/feedback/ {submission_id} \" ) async def get_feedback_by_submission_id ( submission_id : int , db : AsyncSession = Depends ( get_async_db )): \"\"\" Retrieve feedback by submission ID. Args: submission_id (int): The ID of the submission. db (AsyncSession, optional): The async database session. Defaults to Depends(get_async_db). Returns: feedback: The feedback associated with the submission ID. Raises: HTTPException: If an error occurs while retrieving the feedback. \"\"\" try : repo = FeedbackRepository ( session = db ) feedback = await repo . get_feedback_by_submission_id ( submission_id ) return feedback except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e ))","title":"get_feedback_by_submission_id"},{"location":"api/#app.main.get_organisation_by_id","text":"Retrieve an organisation by its ID. Parameters: - id (int): The ID of the organisation to retrieve. - db (AsyncSession): The asynchronous database session. Returns: - dict: The organisation information if found. Raises: - HTTPException: If the organisation is not found (status_code=404) or if there is a server error (status_code=500). Source code in app/main.py 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 @app . get ( \"/organisation/id/ {id} \" ) async def get_organisation_by_id ( id : int , db : AsyncSession = Depends ( get_async_db )): \"\"\" Retrieve an organisation by its ID. Parameters: - id (int): The ID of the organisation to retrieve. - db (AsyncSession): The asynchronous database session. Returns: - dict: The organisation information if found. Raises: - HTTPException: If the organisation is not found (status_code=404) or if there is a server error (status_code=500). \"\"\" try : repo = OrganisationRepository ( session = db ) organisation = await repo . get_organisation_by_id ( id ) if organisation : return organisation else : raise HTTPException ( status_code = 404 , detail = \"Organisation not found\" ) except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e ))","title":"get_organisation_by_id"},{"location":"api/#app.main.get_organisation_by_name","text":"Retrieve an organisation by its name. Parameters: name ( str ) \u2013 The name of the organisation. db ( AsyncSession , default: Depends ( get_async_db ) ) \u2013 The database session. Defaults to Depends(get_async_db). Returns: dict \u2013 The organisation details if found. Raises: HTTPException \u2013 If the organisation is not found or an error occurs. Source code in app/main.py 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 @app . get ( \"/organisation/ {name} \" ) async def get_organisation_by_name ( name : str , db : AsyncSession = Depends ( get_async_db )): \"\"\" Retrieve an organisation by its name. Args: name (str): The name of the organisation. db (AsyncSession, optional): The database session. Defaults to Depends(get_async_db). Returns: dict: The organisation details if found. Raises: HTTPException: If the organisation is not found or an error occurs. \"\"\" try : repo = OrganisationRepository ( session = db ) organisation = await repo . get_organisation_by_name ( name ) if organisation : return organisation else : raise HTTPException ( status_code = 404 , detail = \"Organisation not found\" ) except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e ))","title":"get_organisation_by_name"},{"location":"api/#app.main.get_organisations","text":"Retrieve a list of organisations from the database. Parameters: - db: AsyncSession - The async database session. Returns: - List[Organisation] - A list of organisations retrieved from the database. Raises: - HTTPException: If there is an error retrieving the organisations from the database. Source code in app/main.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 @app . get ( \"/organisations\" ) async def get_organisations ( db : AsyncSession = Depends ( get_async_db )): \"\"\" Retrieve a list of organisations from the database. Parameters: - db: AsyncSession - The async database session. Returns: - List[Organisation] - A list of organisations retrieved from the database. Raises: - HTTPException: If there is an error retrieving the organisations from the database. \"\"\" try : repo = OrganisationRepository ( session = db ) organisations = await repo . get_organisations () return organisations except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e ))","title":"get_organisations"},{"location":"api/#app.main.get_templates_for_assignment","text":"Retrieve templates for a specific assignment. Parameters: assignment_id ( int ) \u2013 The ID of the assignment. db ( AsyncSession , default: Depends ( get_async_db ) ) \u2013 The async database session. Defaults to Depends(get_async_db). Returns: \u2013 List[Template]: A list of templates for the assignment. Raises: HTTPException \u2013 If there is an error retrieving the templates. Source code in app/main.py 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 @app . get ( \"/assignment/ {assignment_id} /get_templates\" ) async def get_templates_for_assignment ( assignment_id : int , db : AsyncSession = Depends ( get_async_db )): \"\"\" Retrieve templates for a specific assignment. Args: assignment_id (int): The ID of the assignment. db (AsyncSession, optional): The async database session. Defaults to Depends(get_async_db). Returns: List[Template]: A list of templates for the assignment. Raises: HTTPException: If there is an error retrieving the templates. \"\"\" try : repo = TemplateRepository ( session = db ) temples_for_assignment = await repo . get_templates_for_assignment ( assignment_id ) return temples_for_assignment except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e ))","title":"get_templates_for_assignment"},{"location":"api/#app.main.student_submit_assignment","text":"Submits a student assignment and returns the feedback. Parameters: submission ( CreateSubmission ) \u2013 The submission object containing the assignment details and the content of the submission. db ( AsyncSession , default: Depends ( get_async_db ) ) \u2013 The async database session. Defaults to Depends(get_async_db). Returns: Feedback \u2013 The feedback object generated for the submission by OpenAI's API. Raises: HTTPException \u2013 If an error occurs during the submission process. Source code in app/main.py 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 @app . post ( \"/student/assignment/submit\" ) async def student_submit_assignment ( submission : CreateSubmission , db : AsyncSession = Depends ( get_async_db )): \"\"\" Submits a student assignment and returns the feedback. Args: submission (CreateSubmission): The submission object containing the assignment details and the content of the submission. db (AsyncSession, optional): The async database session. Defaults to Depends(get_async_db). Returns: Feedback: The feedback object generated for the submission by OpenAI's API. Raises: HTTPException: If an error occurs during the submission process. \"\"\" try : submission_service = SubmissionService ( session = db ) feedback = await submission_service . student_submit_assignment ( submission ) return feedback except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e ))","title":"student_submit_assignment"}]}