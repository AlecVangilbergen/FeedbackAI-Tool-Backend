{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FeedbackAI Tool Documentation","text":"<p>Welcome to the official documentation of the FeedbackAI Tool.</p>"},{"location":"#description","title":"Description","text":"<p>The FeedbackAI Tool is a learning tool that allows students to submit assignments and receive feedback on their submissions. The tool uses OpenAI's API to provide AI-powered feedback on the submissions of students. The tool is designed to help students improve their understanding of various subjects by providing them with detailed feedback on their work. Furthermore the tool allows teachers to create course specific assignments for students and generate template solutions for assignments for comparison to submissions.</p>"},{"location":"#why-use-the-feedbackai-tool","title":"Why use the FeedbackAI Tool?","text":"<ul> <li>Improve Learning: The FeedbackAI Tool helps students improve their understanding of various subjects by providing them with detailed feedback on their work.</li> <li>Save Time: The tool automates the feedback process, saving teachers time and allowing them to focus on other tasks.</li> <li>Increase Engagement: The tool encourages students to engage with the material and submit assignments for feedback.</li> <li>Enhance Teaching: The tool provides teachers with valuable insights into student performance and helps them identify areas for improvement.</li> </ul>"},{"location":"#purpose","title":"Purpose","text":"<p>The purpose of this documentation is to provide detailed information on how to use the FeedbackAI Tool. The documentation includes installation instructions, API references, and more.</p>"},{"location":"assignment/","title":"Assignment","text":""},{"location":"assignment/#assignment-api-references","title":"Assignment API References","text":"<p>Create a new assignment for a course by a teacher so that students can submit solutions and receive feedback for the assignments.</p> <p>Parameters:</p> Name Type Description Default <code>assignment</code> <code>CreateAssignment</code> <p>The assignment data to be created.</p> required <code>db</code> <code>AsyncSession</code> <p>The database session. Defaults to Depends(get_async_db).</p> <code>Depends(get_async_db)</code> <p>Returns:</p> Name Type Description <code>assignment</code> <code>Assignment</code> <p>The newly created assignment.</p> <p>Raises:</p> Type Description <code>UniqueAssignmentTitlePerCourseException</code> <p>If an assignment with the same title already exists for the course.</p> <code>HTTPException</code> <p>If there is an error creating the assignment.</p> Source code in <code>app/main.py</code> <pre><code>@app.post(\"/assignment/add\")\nasync def create_assignment(assignment: CreateAssignment, db: AsyncSession = Depends(get_async_db)):\n    \"\"\"\n    Create a new assignment for a course by a teacher so that students can submit solutions and receive feedback for the assignments.\n\n    Args:\n        assignment (CreateAssignment): The assignment data to be created.\n        db (AsyncSession, optional): The database session. Defaults to Depends(get_async_db).\n\n    Returns:\n        assignment (Assignment): The newly created assignment.\n\n    Raises:\n        UniqueAssignmentTitlePerCourseException: If an assignment with the same title already exists for the course.\n        HTTPException: If there is an error creating the assignment.\n    \"\"\"\n    assignmentService = AssignmentService.from_async_repo(session=db)\n    new_assignment = await assignmentService.create_assignment(assignment=assignment)\n    return new_assignment\n</code></pre> <p>Retrieve all assignments from the database.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>AsyncSession</code> <p>The async database session.</p> <code>Depends(get_async_db)</code> <p>Returns:</p> Name Type Description <code>assignments</code> <code>List[Assignment]</code> <p>A list of assignments retrieved from the database.</p> <p>Raises:</p> Type Description <code>EntityNotFoundException</code> <p>If there is an error retrieving the assignments.</p> <code>HTTPException</code> <p>If there is an error retrieving the assignments.</p> Source code in <code>app/main.py</code> <pre><code>@app.get(\"/assignments\")\nasync def get_assignments(db: AsyncSession = Depends(get_async_db)):\n    \"\"\"\n    Retrieve all assignments from the database.\n\n    Args:\n        db (AsyncSession): The async database session.\n\n    Returns:\n        assignments (List[Assignment]): A list of assignments retrieved from the database.\n\n    Raises:\n        EntityNotFoundException: If there is an error retrieving the assignments.\n        HTTPException: If there is an error retrieving the assignments.\n    \"\"\"\n    assignmentService = AssignmentService.from_async_repo(session=db)\n    assignments = await assignmentService.get_assignments()\n    return assignments\n</code></pre> <p>Retrieve an assignment by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>assignment_id</code> <code>int</code> <p>The ID of the assignment to retrieve.</p> required <code>db</code> <code>AsyncSession</code> <p>The database session. Defaults to Depends(get_async_db).</p> <code>Depends(get_async_db)</code> <p>Returns:</p> Name Type Description <code>assignment</code> <code>Assignment</code> <p>The retrieved assignment.</p> <p>Raises:</p> Type Description <code>EntityNotFoundException</code> <p>If the assignment with the specified ID does not exist.</p> <code>HTTPException</code> <p>If the assignment is not found or an error occurs during retrieval.</p> Source code in <code>app/main.py</code> <pre><code>@app.get(\"/assignment/{assignment_id}\")\nasync def get_assignment_by_id(assignment_id: int, db: AsyncSession = Depends(get_async_db)):\n    \"\"\"\n    Retrieve an assignment by its ID.\n\n    Args:\n        assignment_id (int): The ID of the assignment to retrieve.\n        db (AsyncSession, optional): The database session. Defaults to Depends(get_async_db).\n\n    Returns:\n        assignment (Assignment): The retrieved assignment.\n\n    Raises:\n        EntityNotFoundException: If the assignment with the specified ID does not exist.\n        HTTPException: If the assignment is not found or an error occurs during retrieval.\n    \"\"\"\n    assignmentService = AssignmentService.from_async_repo(session=db)\n    assignment = await assignmentService.get_assignment_by_id(assignment_id)\n    return assignment\n</code></pre> <p>Retrieve assignments by course ID.</p> <p>Parameters:</p> Name Type Description Default <code>course_id</code> <code>int</code> <p>The ID of the course.</p> required <p>Returns:</p> Name Type Description <code>assignments</code> <code>List[Assignment]</code> <p>A list of assignments associated with the given course ID.</p> <p>Raises:</p> Type Description <code>EntityNotFoundException</code> <p>If there is an error retrieving the assignments.</p> <code>HTTPException</code> <p>If there is an error retrieving the assignments.</p> Source code in <code>app/main.py</code> <pre><code>@app.get(\"/assignment/course/{course_id}\")\nasync def get_assignments_by_course_id(course_id: int, db: AsyncSession = Depends(get_async_db)):\n    \"\"\"\n    Retrieve assignments by course ID.\n\n    Args:\n        course_id (int): The ID of the course.\n\n    Returns:\n        assignments (List[Assignment]): A list of assignments associated with the given course ID.\n\n    Raises:\n        EntityNotFoundException: If there is an error retrieving the assignments.\n        HTTPException: If there is an error retrieving the assignments.\n    \"\"\"\n    assignmentService = AssignmentService.from_async_repo(session=db)\n    assignments = await assignmentService.get_assignments_by_course_id(course_id)\n    return assignments\n</code></pre> <p>Generate a template solution for a given assignment ID that can be used to compare student submissions and generate feedback.</p> <p>Parameters:</p> Name Type Description Default <code>assignment_id</code> <code>int</code> <p>The ID of the assignment for which to generate the template solution.</p> required <code>db</code> <code>AsyncSession</code> <p>The asynchronous database session.</p> <code>Depends(get_async_db)</code> <p>Returns:</p> Name Type Description <code>template</code> <code>str</code> <p>The generated template solution.</p> <p>Raises:</p> Type Description <code>EntityNotFoundException</code> <p>If the assignment with the specified ID does not exist.</p> <code>HTTPException</code> <p>If an error occurs during the generation of the template solution.</p> Source code in <code>app/main.py</code> <pre><code>@app.get(\"/template/generate/{assignment_id}\")\nasync def generate_template_solution(assignment_id: int, db: AsyncSession = Depends(get_async_db)):\n    \"\"\"\n    Generate a template solution for a given assignment ID that can be used to compare student submissions and generate feedback.\n\n    Args:\n        assignment_id (int): The ID of the assignment for which to generate the template solution.\n        db (AsyncSession): The asynchronous database session.\n\n    Returns:\n        template (str): The generated template solution.\n\n    Raises:\n        EntityNotFoundException: If the assignment with the specified ID does not exist.\n        HTTPException: If an error occurs during the generation of the template solution.\n    \"\"\"\n    template_service = TemplateService.from_async_repo_and_open_ai_generator(session=db)\n    template = await template_service.generate_template_solution(assignment_id=assignment_id)\n    return template\n</code></pre> <p>Retrieve all templates from the database.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>AsyncSession</code> <p>The async database session.</p> <code>Depends(get_async_db)</code> <p>Returns:</p> Type Description <p>templates List[Templates]:  A list of templates retrieved from the database.</p> <p>Raises:</p> Type Description <code>EntityNotFoundException</code> <p>If there is an error retrieving the templates.</p> Source code in <code>app/main.py</code> <pre><code>@app.get(\"/templates\")\nasync def get_all_templates(db: AsyncSession = Depends(get_async_db)):\n    \"\"\"\n    Retrieve all templates from the database.\n\n    Parameters:\n        db: The async database session.\n\n    Returns:\n        templates List[Templates]:  A list of templates retrieved from the database.\n\n    Raises:\n        EntityNotFoundException: If there is an error retrieving the templates.\n    \"\"\"\n    template_service = TemplateService.from_async_repo_and_open_ai_generator(session=db)\n    templates = await template_service.get_all_templates()\n    return templates\n</code></pre> <p>Add a new template solution to the database. This happens when a teacher finds a template solution satisfactory and wants to use it to compare to student submissions and generate feedback.</p> <p>Parameters:</p> Name Type Description Default <code>template_content</code> <code>CreateTemplate</code> <p>The content of the template to be created.</p> required <code>db</code> <code>AsyncSession</code> <p>The database session. Defaults to Depends(get_async_db).</p> <code>Depends(get_async_db)</code> <p>Returns:</p> Name Type Description <code>message</code> <code>dict</code> <p>A dictionary with a success message if the template is created successfully.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>If an error occurs during the template creation process.</p> Source code in <code>app/main.py</code> <pre><code>@app.post(\"/template/add\")\nasync def add_template_solution(template_content: CreateTemplate, db: AsyncSession = Depends(get_async_db)):\n    \"\"\"\n    Add a new template solution to the database. This happens when a teacher finds a template solution satisfactory and wants to use it to compare to student submissions and generate feedback.\n\n    Args:\n        template_content (CreateTemplate): The content of the template to be created.\n        db (AsyncSession, optional): The database session. Defaults to Depends(get_async_db).\n\n    Returns:\n        message (dict): A dictionary with a success message if the template is created successfully.\n\n    Raises:\n        HTTPException: If an error occurs during the template creation process.\n    \"\"\"\n    template_service = TemplateService.from_async_repo_and_open_ai_generator(session=db)\n    new_template = await template_service.create_template(template=template_content)\n    return {\"message\": \"Template created successfully\"}\n</code></pre> <p>Retrieve templates for a specific assignment.</p> <p>Parameters:</p> Name Type Description Default <code>assignment_id</code> <code>int</code> <p>The ID of the assignment.</p> required <code>db</code> <code>AsyncSession</code> <p>The async database session. Defaults to Depends(get_async_db).</p> <code>Depends(get_async_db)</code> <p>Returns:</p> Name Type Description <code>templates</code> <code>List[Template]</code> <p>A list of templates for the assignment.</p> <p>Raises:</p> Type Description <code>EntityNotFoundException</code> <p>If the assignment with the specified ID does not exist.</p> <code>HTTPException</code> <p>If there is an error retrieving the templates.</p> Source code in <code>app/main.py</code> <pre><code>@app.get(\"/assignment/{assignment_id}/get_templates\")\nasync def get_templates_for_assignment(assignment_id: int, db: AsyncSession = Depends(get_async_db)):\n    \"\"\"\n    Retrieve templates for a specific assignment.\n\n    Args:\n        assignment_id (int): The ID of the assignment.\n        db (AsyncSession, optional): The async database session. Defaults to Depends(get_async_db).\n\n    Returns:\n        templates (List[Template]): A list of templates for the assignment.\n\n    Raises:\n        EntityNotFoundException: If the assignment with the specified ID does not exist.\n        HTTPException: If there is an error retrieving the templates.\n    \"\"\"\n\n    template_service = TemplateService.from_async_repo_and_open_ai_generator(session=db)\n    temples_for_assignment = await template_service.get_templates_for_assignment(assignment_id)\n    return temples_for_assignment\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p>To install and run the FeedbackAI Tool Backend, follow these steps:</p>"},{"location":"installation/#clone-the-repository","title":"Clone the Repository","text":"<pre><code>git clone https://github.com/AlecVangilbergen/FeedbackAI-Tool-Backend.git\n</code></pre>"},{"location":"installation/#create-a-local-database","title":"Create a Local Database","text":"<p>Make sure you have PostgreSQL installed. Then, create a local database named <code>feedbacktool</code>.</p> <pre><code>createdb feedbacktool\n</code></pre>"},{"location":"installation/#install-dependencies","title":"Install Dependencies","text":"<p>Navigate to the project directory and install the required dependencies using <code>pip</code> and the <code>requirements.txt</code> file.</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"installation/#run-the-application","title":"Run the Application","text":"<p>You can run the application using <code>uvicorn</code>.</p> <pre><code>uvicorn app.main:app --reload\n</code></pre> <p>This command will start the FastAPI server, and you'll be able to access the API at <code>http://localhost:8000</code>.</p> <pre><code>INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Open your web browser and navigate to <code>http://alecvangilbergen.github.io/FeedbackAI-Tool-Backend</code> to view the API documentation.</p>"},{"location":"organisation/","title":"Organisation API References","text":"<p>The <code>Organisation</code> object represents an educational institution such as a school, college, or university. It serves as the central entity that manages teachers, courses, and students within the educational system.</p>"},{"location":"organisation/#organisation-attributes","title":"Organisation Attributes","text":"<p>An <code>Organisation</code> object typically includes attributes such as:</p> <ul> <li>ID: A unique identifier for the organisation within the system.</li> <li>Name: The name of the organisation.</li> <li>Username: The username used by the organisation to log in.</li> <li>Password: The password used by the organisation to log in.</li> </ul>"},{"location":"organisation/#relationship-to-teachers","title":"Relationship to Teachers","text":"<p>Teachers have an Organisation ID Attribute that links them to the organisation they are affiliated with. This relationship signifies the organisation to which the teacher belongs.</p>"},{"location":"organisation/#relationship-to-students","title":"Relationship to Students","text":"<p>Students have an Organisation ID Attribute that links them to the organisation they are affiliated with. This relationship signifies the organisation to which the student belongs.</p>"},{"location":"organisation/#api-endpoints","title":"API Endpoints","text":"<p>Create a new organisation for the purpose of managing teachers and students. Args:     organisation (CreateOrganisation): The details of the organisation to be created.     db (AsyncSession, optional): The database session. Defaults to Depends(get_async_db).</p> <p>Returns:</p> Name Type Description <code>message</code> <code>dict</code> <p>A dictionary containing a success message if the organisation is created successfully.</p> <p>Raises:</p> Type Description <code>AlreadyExistsException</code> <p>If an organisation with the same name already exists.</p> <code>HTTPException</code> <p>If there is an error creating the organisation.</p> Source code in <code>app/main.py</code> <pre><code>@app.post(\"/organisation/add\", status_code=status.HTTP_201_CREATED)\nasync def create_organisation(organisation: CreateOrganisation, db: AsyncSession = Depends(get_async_db)):\n    \"\"\"\n    Create a new organisation for the purpose of managing teachers and students.\n    Args:\n        organisation (CreateOrganisation): The details of the organisation to be created.\n        db (AsyncSession, optional): The database session. Defaults to Depends(get_async_db).\n\n    Returns:\n        message (dict): A dictionary containing a success message if the organisation is created successfully.\n\n    Raises:\n        AlreadyExistsException: If an organisation with the same name already exists.\n        HTTPException: If there is an error creating the organisation.\n    \"\"\"\n    repo = OrganisationRepository(session=db)\n    service = OrganisationService(repo)\n    return await service.create_organisation(organisation)\n</code></pre> <p>Retrieve a list of organisations from the database.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>AsyncSession</code> <p>The async database session.</p> <code>Depends(get_async_db)</code> <p>Returns:</p> Name Type Description <code>organisations</code> <code>List[Organisation]</code> <p>A list of organisation objects retrieved from the database.</p> <p>Raises:     NoOrganisationsFoundException: If no organisations are found in the database.     HTTPException: If there is an error retrieving the organisations from the database.</p> Source code in <code>app/main.py</code> <pre><code>@app.get(\"/organisations\")\nasync def get_organisations(db: AsyncSession = Depends(get_async_db)):\n    \"\"\"\n    Retrieve a list of organisations from the database.\n\n    Args:\n        db (AsyncSession): The async database session.\n\n    Returns:\n        organisations (List[Organisation]): A list of organisation objects retrieved from the database.\n    Raises:\n        NoOrganisationsFoundException: If no organisations are found in the database.\n        HTTPException: If there is an error retrieving the organisations from the database.\n    \"\"\"\n    repo = OrganisationRepository(session=db)\n    service = OrganisationService(repo)\n    return await service.get_organisations()\n</code></pre> <p>Retrieve an organisation by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the organisation to retrieve.</p> required <code>db</code> <code>AsyncSession</code> <p>The asynchronous database session.</p> <code>Depends(get_async_db)</code> <p>Returns:</p> Name Type Description <code>organisation</code> <code>Organisation</code> <p>The organisation information if found.</p> <p>Raises:</p> Type Description <code>NotExistsIdException</code> <p>If the organisation with the specified ID does not exist.</p> <code>HTTPException</code> <p>If there is an error retrieving the organisation.</p> Source code in <code>app/main.py</code> <pre><code>@app.get(\"/organisation/id/{id}\")\nasync def get_organisation_by_id(id: int, db: AsyncSession = Depends(get_async_db)):\n    \"\"\"\n    Retrieve an organisation by its ID.\n\n    Args:\n        id (int): The ID of the organisation to retrieve.\n        db (AsyncSession): The asynchronous database session.\n\n    Returns:\n        organisation (Organisation): The organisation information if found.\n\n    Raises:\n        NotExistsIdException: If the organisation with the specified ID does not exist.\n        HTTPException: If there is an error retrieving the organisation.\n    \"\"\"\n    repo = OrganisationRepository(session=db)\n    service = OrganisationService(repo)\n    return await service.get_organisation_by_id(id)\n</code></pre> <p>Retrieve an organisation by its name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the organisation.</p> required <code>db</code> <code>AsyncSession</code> <p>The database session. Defaults to Depends(get_async_db).</p> <code>Depends(get_async_db)</code> <p>Returns:</p> Name Type Description <code>organisation</code> <code>Organisation</code> <p>The organisation details if found.</p> <p>Raises:</p> Type Description <code>NotExistsException</code> <p>If the organisation with the specified name does not exist.</p> <code>HTTPException</code> <p>If an error occurs.</p> Source code in <code>app/main.py</code> <pre><code>@app.get(\"/organisation/{name}\")\nasync def get_organisation_by_name(name: str, db: AsyncSession = Depends(get_async_db)):\n    \"\"\"\n    Retrieve an organisation by its name.\n\n    Args:\n        name (str): The name of the organisation.\n        db (AsyncSession, optional): The database session. Defaults to Depends(get_async_db).\n\n    Returns:\n        organisation (Organisation): The organisation details if found.\n\n    Raises:\n        NotExistsException: If the organisation with the specified name does not exist.\n        HTTPException: If an error occurs.\n    \"\"\"\n    repo = OrganisationRepository(session=db)\n    service = OrganisationService(repo)\n    return await service.get_organisation_by_name(name)\n</code></pre> <p>Delete an organisation by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the organisation to be deleted.</p> required <code>db</code> <code>AsyncSession</code> <p>The asynchronous database session.</p> <code>Depends(get_async_db)</code> <p>Returns:</p> Name Type Description <code>message</code> <code>dict</code> <p>A dictionary with a success message if the organisation is deleted successfully.</p> <p>Raises:</p> Type Description <code>NotExistsIdException</code> <p>If the organisation with the specified ID does not exist.</p> <code>HTTPException</code> <p>If there is an error deleting the organisation.</p> Source code in <code>app/main.py</code> <pre><code>@app.delete(\"/organisation/delete/{id}\")\nasync def delete_organisation(id: int, db: AsyncSession = Depends(get_async_db)):\n    \"\"\"\n    Delete an organisation by its ID.\n\n    Args:\n        id (int): The ID of the organisation to be deleted.\n        db (AsyncSession): The asynchronous database session.\n\n    Returns:\n        message (dict): A dictionary with a success message if the organisation is deleted successfully.\n\n    Raises:\n        NotExistsIdException: If the organisation with the specified ID does not exist.\n        HTTPException: If there is an error deleting the organisation.\n    \"\"\"\n    repo = OrganisationRepository(session=db)\n    service = OrganisationService(repo)\n    return await service.delete_organisation(id)\n</code></pre>"},{"location":"student/","title":"Student API References","text":""},{"location":"student/#student-object-and-its-relationship-to-organisation-and-submissions","title":"Student Object and its Relationship to Organisation and Submissions","text":"<p>The <code>Student</code> object represents a learner or trainee within the educational system (<code>Organisation</code>). Students are  responsible for completing assignments, when they make a submission, it is stored as a <code>Submission</code> object. This submission is compared to the <code>Template Solutions</code> generated by the <code>Open AI API</code> that correspond to the <code>Assignment</code> object. Based on this comparison, <code>Feedback</code> is generated by the <code>Open AI API</code> and stored as a <code>Feedback</code> object.</p>"},{"location":"student/#student-attributes","title":"Student Attributes","text":"<p>A <code>Student</code> object typically includes attributes such as:</p> <ul> <li>ID: A unique identifier for the student within the system.</li> <li>Name: The name of the student.</li> <li>First Name: The first name of the student.</li> <li>Email: Contact information for the student. Also used to login to the system.</li> <li>Organisation: The educational institution or organisation to which the student is affiliated.</li> </ul>"},{"location":"student/#api-endpoints","title":"API Endpoints","text":"<p>Create a new student for the organisation so that students can submit assignments and receive feedback.</p> <p>Parameters:</p> Name Type Description Default <code>student</code> <code>CreateStudent</code> <p>The student data to be created.</p> required <code>db</code> <code>AsyncSession</code> <p>The async database session. Defaults to Depends(get_async_db).</p> <code>Depends(get_async_db)</code> <p>Returns:</p> Name Type Description <code>message</code> <code>dict</code> <p>A dictionary containing a success message if the student is created successfully.</p> <p>Raises:</p> Type Description <code>StudentAlreadyExistsException</code> <p>If a student with the same email already exists.</p> <code>HTTPException</code> <p>If there is an error creating the student.</p> Source code in <code>app/main.py</code> <pre><code>@app.post(\"/student/add\", status_code=status.HTTP_201_CREATED)\nasync def create_student(student: CreateStudent, db: AsyncSession = Depends(get_async_db)):\n   \"\"\"\n    Create a new student for the organisation so that students can submit assignments and receive feedback.\n\n    Args:\n        student (CreateStudent): The student data to be created.\n        db (AsyncSession, optional): The async database session. Defaults to Depends(get_async_db).\n\n    Returns:\n        message (dict): A dictionary containing a success message if the student is created successfully.\n\n    Raises:\n        StudentAlreadyExistsException: If a student with the same email already exists.\n        HTTPException: If there is an error creating the student.\n   \"\"\"\n   repo = StudentRepository(session=db)\n   service = StudentService(repo)\n   return await service.create_student(student)\n</code></pre> <p>Retrieve all students from the database.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>AsyncSession</code> <p>The async database session.</p> <code>Depends(get_async_db)</code> <p>Returns:</p> Name Type Description <code>students</code> <code>List[Student]</code> <p>A list of student objects retrieved from the database.</p> <p>Raises:</p> Type Description <code>NoStudentsFoundException</code> <p>If no students are found in the database.</p> <code>HTTPException</code> <p>If there is an error retrieving the students from the database.</p> Source code in <code>app/main.py</code> <pre><code>@app.get(\"/students\")\nasync def get_students(db: AsyncSession = Depends(get_async_db)):\n    \"\"\"\n    Retrieve all students from the database.\n\n    Args:\n        db (AsyncSession): The async database session.\n\n    Returns:\n        students (List[Student]): A list of student objects retrieved from the database.\n\n    Raises:\n        NoStudentsFoundException: If no students are found in the database.\n        HTTPException: If there is an error retrieving the students from the database.\n    \"\"\"\n    repo = StudentRepository(session=db)\n    service = StudentService(repo)\n    return await service.get_students()\n</code></pre> <p>Sends the submission made by a student to the OpenAI API and compares it to the provided template solutions for generating feedback.</p> <p>Parameters:</p> Name Type Description Default <code>submission</code> <code>CreateSubmission</code> <p>The submission object containing the assignment details and the content of the submission.</p> required <code>db</code> <code>AsyncSession</code> <p>The async database session. Defaults to Depends(get_async_db).</p> <code>Depends(get_async_db)</code> <p>Returns:</p> Name Type Description <code>feedback</code> <code>Feedback</code> <p>The feedback object generated for the submission by OpenAI's API.</p> <p>Raises:</p> Type Description <code>EntityNotFoundException</code> <p>If the assignment with the specified ID does not exist.</p> <code>HTTPException</code> <p>If an error occurs during the submission process.</p> Source code in <code>app/main.py</code> <pre><code>@app.post(\"/student/assignment/submit\")\nasync def student_submit_assignment(submission: CreateSubmission, db: AsyncSession = Depends(get_async_db)):\n    \"\"\"\n    Sends the submission made by a student to the OpenAI API and compares it to the provided template solutions for generating feedback.\n\n    Args:\n        submission (CreateSubmission): The submission object containing the assignment details and the content of the submission.\n        db (AsyncSession, optional): The async database session. Defaults to Depends(get_async_db).\n\n    Returns:\n        feedback (Feedback): The feedback object generated for the submission by OpenAI's API.\n\n    Raises:\n        EntityNotFoundException: If the assignment with the specified ID does not exist.\n        HTTPException: If an error occurs during the submission process.\n    \"\"\"\n    submission_service = SubmissionService.from_async_repo_and_open_ai_feedback_generator(session=db)\n    feedback = await submission_service.student_submit_assignment(submission)\n    return feedback\n</code></pre> <p>Retrieve a student by their ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the student to retrieve.</p> required <code>db</code> <code>AsyncSession</code> <p>The database session. Defaults to Depends(get_async_db).</p> <code>Depends(get_async_db)</code> <p>Returns:</p> Name Type Description <code>student</code> <code>Student</code> <p>The student object if found.</p> <p>Raises:</p> Type Description <code>StudentIdNotFoundException</code> <p>If the student with the specified ID does not exist.</p> <code>HTTPException</code> <p>If there is an error retrieving the student.</p> Source code in <code>app/main.py</code> <pre><code>@app.get(\"/student/id/{id}\")\nasync def get_student_by_id(id: int, db: AsyncSession = Depends(get_async_db)):\n    \"\"\"\n    Retrieve a student by their ID.\n\n    Args:\n        id (int): The ID of the student to retrieve.\n        db (AsyncSession, optional): The database session. Defaults to Depends(get_async_db).\n\n    Returns:\n        student (Student): The student object if found.\n\n    Raises:\n        StudentIdNotFoundException: If the student with the specified ID does not exist.\n        HTTPException: If there is an error retrieving the student.\n    \"\"\"\n    repo = StudentRepository(session=db)\n    service = StudentService(repo)\n    return await service.get_student_by_id(id)\n</code></pre> <p>Retrieve a student by their first name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The first name of the student.</p> required <code>db</code> <code>AsyncSession</code> <p>The database session. Defaults to Depends(get_async_db).</p> <code>Depends(get_async_db)</code> <p>Returns:</p> Name Type Description <code>student</code> <code>Student</code> <p>The student object if found.</p> <p>Raises:</p> Type Description <code>StudentNotFoundException</code> <p>If the student with the specified name does not exist.</p> <code>HTTPException</code> <p>If there is an error retrieving the student.</p> Source code in <code>app/main.py</code> <pre><code>@app.get(\"/student/{name}\")\nasync def get_student_by_firstname(name: str, db: AsyncSession = Depends(get_async_db)):\n    \"\"\"\n    Retrieve a student by their first name.\n\n    Args:\n        name (str): The first name of the student.\n        db (AsyncSession, optional): The database session. Defaults to Depends(get_async_db).\n\n    Returns:\n        student (Student): The student object if found.\n\n    Raises:\n        StudentNotFoundException: If the student with the specified name does not exist.\n        HTTPException: If there is an error retrieving the student.\n    \"\"\"\n    repo = StudentRepository(session=db)\n    service = StudentService(repo)\n    return await service.get_student_by_firstname(name)\n</code></pre> <p>Delete a student by their ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the student to be deleted.</p> required <code>db</code> <code>AsyncSession</code> <p>The async database session. Defaults to Depends(get_async_db).</p> <code>Depends(get_async_db)</code> <p>Returns:</p> Name Type Description <code>message</code> <code>dict</code> <p>A dictionary containing a success message if the student is deleted successfully.</p> <p>Raises:</p> Type Description <code>StudentIdNotFoundException</code> <p>If the student with the specified ID does not exist.</p> <code>HTTPException</code> <p>If there is an error deleting the student.</p> Source code in <code>app/main.py</code> <pre><code>@app.delete(\"/student/delete/{id}\")\nasync def delete_student(id: int, db: AsyncSession = Depends(get_async_db)):\n    \"\"\"\n    Delete a student by their ID.\n\n    Args:\n        id (int): The ID of the student to be deleted.\n        db (AsyncSession, optional): The async database session. Defaults to Depends(get_async_db).\n\n    Returns:\n        message (dict): A dictionary containing a success message if the student is deleted successfully.\n\n    Raises:\n        StudentIdNotFoundException: If the student with the specified ID does not exist.\n        HTTPException: If there is an error deleting the student.\n    \"\"\"\n    repo = StudentRepository(session=db)\n    service = StudentService(repo)\n    return await service.delete_student(id)\n</code></pre>"},{"location":"teacher/","title":"Teacher API References","text":""},{"location":"teacher/#teacher-object-and-its-relationship-to-organisation-and-courses","title":"Teacher Object and its Relationship to Organisation and Courses","text":"<p>The <code>Teacher</code> object represents an educator or instructor within the educational system. In many educational institutions, teachers play a crucial role in delivering curriculum content, facilitating learning activities, and assessing student progress.</p>"},{"location":"teacher/#teacher-attributes","title":"Teacher Attributes","text":"<p>A <code>Teacher</code> object typically includes attributes such as:</p> <ul> <li>ID: A unique identifier for the teacher within the system.</li> <li>Name: The name of the teacher.</li> <li>First Name: The first name of the teacher.</li> <li>Email: Contact information for the teacher.</li> <li>Organisation: The educational institution or organisation to which the teacher is affiliated.</li> </ul>"},{"location":"teacher/#relationship-to-organisation","title":"Relationship to Organisation","text":"<p>In the context of an educational system, a <code>Teacher</code> is often associated with an <code>Organisation</code>, such as a school, college, or university.</p>"},{"location":"teacher/#relationship-to-courses","title":"Relationship to Courses","text":"<p>Teachers are typically responsible for teaching one or more courses within an educational institution. A course can only be taught by one teacher.</p>"},{"location":"teacher/#api-endpoints","title":"API Endpoints","text":"<p>Create a new teacher for the organisation to manage courses and assignments.</p> <p>Parameters:</p> Name Type Description Default <code>teacher</code> <code>CreateTeacher</code> <p>The teacher data to be created.</p> required <code>db</code> <code>AsyncSession</code> <p>The async database session. Defaults to Depends(get_async_db).</p> <code>Depends(get_async_db)</code> <p>Returns:</p> Name Type Description <code>message</code> <code>dict</code> <p>A dictionary containing a success message if the teacher is created successfully.</p> <p>Raises:</p> Type Description <code>TeacherAlreadyExistsException</code> <p>If a teacher with the same email already exists.</p> <code>HTTPException</code> <p>If there is an error creating the teacher.</p> Source code in <code>app/main.py</code> <pre><code>@app.post(\"/teacher/add\")\nasync def create_teacher(teacher: CreateTeacher, db: AsyncSession = Depends(get_async_db)):\n    \"\"\"\n    Create a new teacher for the organisation to manage courses and assignments.\n\n    Args:\n        teacher (CreateTeacher): The teacher data to be created.\n        db (AsyncSession, optional): The async database session. Defaults to Depends(get_async_db).\n\n    Returns:\n        message (dict): A dictionary containing a success message if the teacher is created successfully.\n\n    Raises:\n        TeacherAlreadyExistsException: If a teacher with the same email already exists.\n        HTTPException: If there is an error creating the teacher.\n    \"\"\"\n    repo = TeacherRepository(session=db)\n    service = TeacherService(repo)\n    return await service.create_teacher(teacher)\n</code></pre> <p>Retrieve all teachers from the database.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>AsyncSession</code> <p>The async database session.</p> <code>Depends(get_async_db)</code> <p>Returns:</p> Name Type Description <code>teachers</code> <code>List[Teacher]</code> <p>A list of teacher objects retrieved from the database.</p> <p>Raises:</p> Type Description <code>NoTeachersFoundException</code> <p>If no teachers are found in the database.</p> <code>HTTPException</code> <p>If there is an error retrieving the teachers from the database.</p> Source code in <code>app/main.py</code> <pre><code>@app.get(\"/teachers\")\nasync def get_teachers(db: AsyncSession = Depends(get_async_db)):\n    \"\"\"\n    Retrieve all teachers from the database.\n\n    Args:\n        db (AsyncSession): The async database session.\n\n    Returns:\n        teachers (List[Teacher]): A list of teacher objects retrieved from the database.\n\n    Raises:\n        NoTeachersFoundException: If no teachers are found in the database.\n        HTTPException: If there is an error retrieving the teachers from the database.\n    \"\"\"\n    repo = TeacherRepository(session=db)\n    service = TeacherService(repo)\n    return await service.get_teachers()\n</code></pre> <p>Retrieve a teacher by their ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the teacher to retrieve.</p> required <code>db</code> <code>AsyncSession</code> <p>The database session. Defaults to Depends(get_async_db).</p> <code>Depends(get_async_db)</code> <p>Returns:</p> Name Type Description <code>teacher</code> <code>Teacher</code> <p>The teacher object if found.</p> <p>Raises:</p> Type Description <code>TeacherIdNotFoundException</code> <p>If the teacher with the specified ID does not exist.</p> <code>HTTPException</code> <p>If there is an error retrieving the teacher.</p> Source code in <code>app/main.py</code> <pre><code>@app.get(\"/teacher/id/{id}\")\nasync def get_teacher_by_id(id: int, db: AsyncSession = Depends(get_async_db)):\n    \"\"\"\n    Retrieve a teacher by their ID.\n\n    Args:\n        id (int): The ID of the teacher to retrieve.\n        db (AsyncSession, optional): The database session. Defaults to Depends(get_async_db).\n\n    Returns:\n        teacher (Teacher): The teacher object if found.\n\n    Raises:\n        TeacherIdNotFoundException: If the teacher with the specified ID does not exist.\n        HTTPException: If there is an error retrieving the teacher.\n    \"\"\"\n    repo = TeacherRepository(session=db)\n    service = TeacherService(repo)\n    return await service.get_teacher_by_id(id)\n</code></pre> <p>Retrieve a teacher by their first name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The first name of the teacher.</p> required <code>db</code> <code>AsyncSession</code> <p>The database session. Defaults to Depends(get_async_db).</p> <code>Depends(get_async_db)</code> <p>Returns:</p> Name Type Description <code>teacher</code> <code>Teacher</code> <p>The teacher object if found.</p> <p>Raises:</p> Type Description <code>TeacherNotFoundException</code> <p>If the teacher with the specified name does not exist.</p> <code>HTTPException</code> <p>If there is an error retrieving the teacher.</p> Source code in <code>app/main.py</code> <pre><code>@app.get(\"/teacher/{name}\")\nasync def get_teacher_by_firstname(name: str, db: AsyncSession = Depends(get_async_db)):\n    \"\"\"\n    Retrieve a teacher by their first name.\n\n    Args:\n        name (str): The first name of the teacher.\n        db (AsyncSession, optional): The database session. Defaults to Depends(get_async_db).\n\n    Returns:\n       teacher (Teacher): The teacher object if found.\n\n    Raises:\n        TeacherNotFoundException: If the teacher with the specified name does not exist.\n        HTTPException: If there is an error retrieving the teacher.\n    \"\"\"\n    repo = TeacherRepository(session=db)\n    service = TeacherService(repo)\n    return await service.get_teacher_by_firstname(name)\n</code></pre> <p>Update a teacher.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the teacher to update.</p> required <code>teacher</code> <code>UpdateTeacher</code> <p>The updated teacher data.</p> required <code>db</code> <code>AsyncSession</code> <p>The async database session. Defaults to Depends(get_async_db).</p> <code>Depends(get_async_db)</code> <p>Returns:</p> Name Type Description <code>message</code> <code>dict</code> <p>A dictionary containing a success message if the teacher is updated successfully.</p> <p>Raises:</p> Type Description <code>TeacherIdNotFoundException</code> <p>If the teacher with the specified ID does not exist.</p> <code>HTTPException</code> <p>If there is an error updating the teacher.</p> Source code in <code>app/main.py</code> <pre><code>@app.put(\"/teacher/update/{id}\")\nasync def update_teacher(id: int, teacher: UpdateTeacher, db: AsyncSession = Depends(get_async_db)):\n    \"\"\"\n    Update a teacher.\n\n    Args:\n        id (int): The ID of the teacher to update.\n        teacher (UpdateTeacher): The updated teacher data.\n        db (AsyncSession, optional): The async database session. Defaults to Depends(get_async_db).\n\n    Returns:\n        message (dict): A dictionary containing a success message if the teacher is updated successfully.\n\n    Raises:\n        TeacherIdNotFoundException: If the teacher with the specified ID does not exist.\n        HTTPException: If there is an error updating the teacher.\n    \"\"\"\n    repo = TeacherRepository(session=db)\n    service = TeacherService(repo)\n    return await service.update_teacher(id, teacher)\n</code></pre> <p>Delete a teacher by their ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the teacher to be deleted.</p> required <code>db</code> <code>AsyncSession</code> <p>The async database session. Defaults to Depends(get_async_db).</p> <code>Depends(get_async_db)</code> <p>Returns:</p> Name Type Description <code>message</code> <code>dict</code> <p>A dictionary containing a success message if the teacher is deleted successfully.</p> <p>Raises:</p> Type Description <code>TeacherIdNotFoundException</code> <p>If the teacher with the specified ID does not exist.</p> <code>HTTPException</code> <p>If there is an error deleting the teacher.</p> Source code in <code>app/main.py</code> <pre><code>@app.delete(\"/teacher/delete/{id}\")\nasync def delete_teacher(id: int, db: AsyncSession = Depends(get_async_db)):\n    \"\"\"\n    Delete a teacher by their ID.\n\n    Args:\n        id (int): The ID of the teacher to be deleted.\n        db (AsyncSession, optional): The async database session. Defaults to Depends(get_async_db).\n\n    Returns:\n        message (dict): A dictionary containing a success message if the teacher is deleted successfully.\n\n    Raises:\n        TeacherIdNotFoundException: If the teacher with the specified ID does not exist.\n        HTTPException: If there is an error deleting the teacher.\n    \"\"\"\n    repo = TeacherRepository(session=db)\n    service = TeacherService(repo)\n    return await service.delete_teacher(id)\n</code></pre>"}]}