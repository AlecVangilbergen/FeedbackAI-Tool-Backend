{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"organisation/","text":"Organisation API References Create a new organisation. Parameters: organisation ( CreateOrganisation ) \u2013 The details of the organisation to be created. db ( AsyncSession , default: Depends ( get_async_db ) ) \u2013 The database session. Defaults to Depends(get_async_db). Returns: dict \u2013 A dictionary containing a success message if the organisation is created successfully. Raises: HTTPException \u2013 If there is an error creating the organisation. Source code in app/main.py 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 @app . post ( \"/organisation/add\" ) async def create_organisation ( organisation : CreateOrganisation , db : AsyncSession = Depends ( get_async_db )): \"\"\" Create a new organisation. Args: organisation (CreateOrganisation): The details of the organisation to be created. db (AsyncSession, optional): The database session. Defaults to Depends(get_async_db). Returns: dict: A dictionary containing a success message if the organisation is created successfully. Raises: HTTPException: If there is an error creating the organisation. \"\"\" try : repo = OrganisationRepository ( session = db ) # Pass the session directly to the OrganisationRepository new_organisation = await repo . create_organisation ( organisation ) # Create the new organisation return { \"message\" : \"Organisation created successfully\" } except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e )) Retrieve a list of organisations from the database. Parameters: - db: AsyncSession - The async database session. Returns: - List[Organisation] - A list of organisations retrieved from the database. Raises: - HTTPException: If there is an error retrieving the organisations from the database. Source code in app/main.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 @app . get ( \"/organisations\" ) async def get_organisations ( db : AsyncSession = Depends ( get_async_db )): \"\"\" Retrieve a list of organisations from the database. Parameters: - db: AsyncSession - The async database session. Returns: - List[Organisation] - A list of organisations retrieved from the database. Raises: - HTTPException: If there is an error retrieving the organisations from the database. \"\"\" try : repo = OrganisationRepository ( session = db ) organisations = await repo . get_organisations () return organisations except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e )) Retrieve an organisation by its ID. Parameters: - id (int): The ID of the organisation to retrieve. - db (AsyncSession): The asynchronous database session. Returns: - dict: The organisation information if found. Raises: - HTTPException: If the organisation is not found (status_code=404) or if there is a server error (status_code=500). Source code in app/main.py 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 @app . get ( \"/organisation/id/ {id} \" ) async def get_organisation_by_id ( id : int , db : AsyncSession = Depends ( get_async_db )): \"\"\" Retrieve an organisation by its ID. Parameters: - id (int): The ID of the organisation to retrieve. - db (AsyncSession): The asynchronous database session. Returns: - dict: The organisation information if found. Raises: - HTTPException: If the organisation is not found (status_code=404) or if there is a server error (status_code=500). \"\"\" try : repo = OrganisationRepository ( session = db ) organisation = await repo . get_organisation_by_id ( id ) if organisation : return organisation else : raise HTTPException ( status_code = 404 , detail = \"Organisation not found\" ) except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e )) Retrieve an organisation by its name. Parameters: name ( str ) \u2013 The name of the organisation. db ( AsyncSession , default: Depends ( get_async_db ) ) \u2013 The database session. Defaults to Depends(get_async_db). Returns: dict \u2013 The organisation details if found. Raises: HTTPException \u2013 If the organisation is not found or an error occurs. Source code in app/main.py 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 @app . get ( \"/organisation/ {name} \" ) async def get_organisation_by_name ( name : str , db : AsyncSession = Depends ( get_async_db )): \"\"\" Retrieve an organisation by its name. Args: name (str): The name of the organisation. db (AsyncSession, optional): The database session. Defaults to Depends(get_async_db). Returns: dict: The organisation details if found. Raises: HTTPException: If the organisation is not found or an error occurs. \"\"\" try : repo = OrganisationRepository ( session = db ) organisation = await repo . get_organisation_by_name ( name ) if organisation : return organisation else : raise HTTPException ( status_code = 404 , detail = \"Organisation not found\" ) except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e )) Delete an organisation by its ID. Parameters: - id (int): The ID of the organisation to be deleted. - db (AsyncSession): The asynchronous database session. Returns: - dict: A dictionary with a success message if the organisation is deleted successfully. Raises: - HTTPException: If an error occurs during the deletion process. Source code in app/main.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 @app . delete ( \"/organisation/delete/ {id} \" ) async def delete_organisation ( id : int , db : AsyncSession = Depends ( get_async_db )): \"\"\" Delete an organisation by its ID. Parameters: - id (int): The ID of the organisation to be deleted. - db (AsyncSession): The asynchronous database session. Returns: - dict: A dictionary with a success message if the organisation is deleted successfully. Raises: - HTTPException: If an error occurs during the deletion process. \"\"\" try : repo = OrganisationRepository ( session = db ) organisation = await repo . delete_organisation ( id ) return { \"message\" : \"Organisation deleted successfully\" } except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e ))","title":"Organisation"},{"location":"organisation/#organisation-api-references","text":"Create a new organisation. Parameters: organisation ( CreateOrganisation ) \u2013 The details of the organisation to be created. db ( AsyncSession , default: Depends ( get_async_db ) ) \u2013 The database session. Defaults to Depends(get_async_db). Returns: dict \u2013 A dictionary containing a success message if the organisation is created successfully. Raises: HTTPException \u2013 If there is an error creating the organisation. Source code in app/main.py 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 @app . post ( \"/organisation/add\" ) async def create_organisation ( organisation : CreateOrganisation , db : AsyncSession = Depends ( get_async_db )): \"\"\" Create a new organisation. Args: organisation (CreateOrganisation): The details of the organisation to be created. db (AsyncSession, optional): The database session. Defaults to Depends(get_async_db). Returns: dict: A dictionary containing a success message if the organisation is created successfully. Raises: HTTPException: If there is an error creating the organisation. \"\"\" try : repo = OrganisationRepository ( session = db ) # Pass the session directly to the OrganisationRepository new_organisation = await repo . create_organisation ( organisation ) # Create the new organisation return { \"message\" : \"Organisation created successfully\" } except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e )) Retrieve a list of organisations from the database. Parameters: - db: AsyncSession - The async database session. Returns: - List[Organisation] - A list of organisations retrieved from the database. Raises: - HTTPException: If there is an error retrieving the organisations from the database. Source code in app/main.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 @app . get ( \"/organisations\" ) async def get_organisations ( db : AsyncSession = Depends ( get_async_db )): \"\"\" Retrieve a list of organisations from the database. Parameters: - db: AsyncSession - The async database session. Returns: - List[Organisation] - A list of organisations retrieved from the database. Raises: - HTTPException: If there is an error retrieving the organisations from the database. \"\"\" try : repo = OrganisationRepository ( session = db ) organisations = await repo . get_organisations () return organisations except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e )) Retrieve an organisation by its ID. Parameters: - id (int): The ID of the organisation to retrieve. - db (AsyncSession): The asynchronous database session. Returns: - dict: The organisation information if found. Raises: - HTTPException: If the organisation is not found (status_code=404) or if there is a server error (status_code=500). Source code in app/main.py 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 @app . get ( \"/organisation/id/ {id} \" ) async def get_organisation_by_id ( id : int , db : AsyncSession = Depends ( get_async_db )): \"\"\" Retrieve an organisation by its ID. Parameters: - id (int): The ID of the organisation to retrieve. - db (AsyncSession): The asynchronous database session. Returns: - dict: The organisation information if found. Raises: - HTTPException: If the organisation is not found (status_code=404) or if there is a server error (status_code=500). \"\"\" try : repo = OrganisationRepository ( session = db ) organisation = await repo . get_organisation_by_id ( id ) if organisation : return organisation else : raise HTTPException ( status_code = 404 , detail = \"Organisation not found\" ) except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e )) Retrieve an organisation by its name. Parameters: name ( str ) \u2013 The name of the organisation. db ( AsyncSession , default: Depends ( get_async_db ) ) \u2013 The database session. Defaults to Depends(get_async_db). Returns: dict \u2013 The organisation details if found. Raises: HTTPException \u2013 If the organisation is not found or an error occurs. Source code in app/main.py 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 @app . get ( \"/organisation/ {name} \" ) async def get_organisation_by_name ( name : str , db : AsyncSession = Depends ( get_async_db )): \"\"\" Retrieve an organisation by its name. Args: name (str): The name of the organisation. db (AsyncSession, optional): The database session. Defaults to Depends(get_async_db). Returns: dict: The organisation details if found. Raises: HTTPException: If the organisation is not found or an error occurs. \"\"\" try : repo = OrganisationRepository ( session = db ) organisation = await repo . get_organisation_by_name ( name ) if organisation : return organisation else : raise HTTPException ( status_code = 404 , detail = \"Organisation not found\" ) except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e )) Delete an organisation by its ID. Parameters: - id (int): The ID of the organisation to be deleted. - db (AsyncSession): The asynchronous database session. Returns: - dict: A dictionary with a success message if the organisation is deleted successfully. Raises: - HTTPException: If an error occurs during the deletion process. Source code in app/main.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 @app . delete ( \"/organisation/delete/ {id} \" ) async def delete_organisation ( id : int , db : AsyncSession = Depends ( get_async_db )): \"\"\" Delete an organisation by its ID. Parameters: - id (int): The ID of the organisation to be deleted. - db (AsyncSession): The asynchronous database session. Returns: - dict: A dictionary with a success message if the organisation is deleted successfully. Raises: - HTTPException: If an error occurs during the deletion process. \"\"\" try : repo = OrganisationRepository ( session = db ) organisation = await repo . delete_organisation ( id ) return { \"message\" : \"Organisation deleted successfully\" } except Exception as e : raise HTTPException ( status_code = 500 , detail = str ( e ))","title":"Organisation API References"}]}